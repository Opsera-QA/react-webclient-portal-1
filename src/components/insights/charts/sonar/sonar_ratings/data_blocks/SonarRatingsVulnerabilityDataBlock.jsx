import React, {useContext} from "react";
import PropTypes from "prop-types";
import Model from "core/data_model/model";
import { DialogToastContext } from "contexts/DialogToastContext";
import {LETTER_GRADES} from "components/common/metrics/grade/MetricLetterGradeText";
import HorizontalDataBlockContainer from "components/common/metrics/data_blocks/horizontal/HorizontalDataBlockContainer";
import LegendDataBlock from "components/common/metrics/data_blocks/legend/LegendDataBlock";
import TwoLineScoreDataBlock from "components/common/metrics/score/TwoLineScoreDataBlock";
import TwoLineGradeDataBlock from "components/common/metrics/grade/TwoLineGradeDataBlock";
import Col from "react-bootstrap/Col";
import FullScreenCenterOverlayContainer from "components/common/overlays/center/FullScreenCenterOverlayContainer";
import { faTable } from "@fortawesome/pro-light-svg-icons";
import SonarPipelineWiseVulnerabilityDetails from './SonarPipelineWiseVulnerabilityDetails';
function SonarRatingsVulnerabilityDataBlock({  securityRating, vulnerabilityCount }) {
  const toastContext = useContext(DialogToastContext);
  
  const onRowSelect =()=>{    
    toastContext.showOverlayPanel(
      <FullScreenCenterOverlayContainer
        closePanel={closePanel}
        showPanel={true}
        titleText={`Sonar Ratings: Vulnerability`}
        showToasts={true}
        titleIcon={faTable}
        isLoading={false}
        linkTooltipText={"View Full Blueprint"}
      >
        <div className={"p-3"}>
          <SonarPipelineWiseVulnerabilityDetails />
        </div>        
      </FullScreenCenterOverlayContainer>
    );
  };
  const closePanel = () => {
    toastContext.removeInlineMessage();
    toastContext.clearOverlayPanel();
  };

  const getSonarSecurityGrade = (rating) => {
    if (rating <= 1) {
      return LETTER_GRADES.A;
    }
    else if (rating <= 2) {
      return LETTER_GRADES.B;
    }
    else if (rating <= 3) {
      return LETTER_GRADES.C;
    }
    else if (rating <= 4) {
      return LETTER_GRADES.D;
    }
    else if (rating <= 5) {
      return LETTER_GRADES.E;
    }
    else {
      return "ERROR";
    }
  };

  const getLeftDataBlock = () => {
    return (
      <TwoLineGradeDataBlock
        letterGrade={getSonarSecurityGrade(securityRating)}
        subtitle={"Security"}
      />
    );
  };

  const getMiddleDataBlock = () => {
    return (
      <TwoLineScoreDataBlock
        score={vulnerabilityCount}
        subtitle={"Vulnerabilities"}
      />
    );
  };

  const getRightDataBlock = () => {
    return (
      <LegendDataBlock
        firstItem={"Goal for Security: A"}
        // secondItem={"Fix [Insert Count] Vulnerabilities"}
      />
    );
  };

  return (
    <HorizontalDataBlockContainer
      title={"Sonar Ratings: Security"}
      onClick={() => onRowSelect()}
      leftDataBlock={getLeftDataBlock()}
      middleDataBlock={getMiddleDataBlock()}
      rightDataBlock={getRightDataBlock()}
    />
  );
}

SonarRatingsVulnerabilityDataBlock.propTypes = {
  securityRating: PropTypes.number,
  vulnerabilityCount: PropTypes.number,
};

export default SonarRatingsVulnerabilityDataBlock;
